/* The following code was generated by JFlex 1.4.1 on 24/08/17 12:31 */

package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 24/08/17 12:31 from the specification file
 * <tt>C:/Users/Catherine/Downloads/jflex-1.4.1/jflex-1.4.1/test.flex</tt>
 */
public class JavaTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\15\1\0\1\7\1\0\22\0\1\77\1\101\1\4"+
    "\1\6\1\0\1\102\1\10\1\5\1\100\1\0\1\22\1\102\1\0"+
    "\1\72\1\0\1\21\1\17\1\25\1\25\1\74\6\2\1\36\1\11"+
    "\1\102\1\34\1\35\1\20\1\0\1\66\1\63\1\75\1\56\1\45"+
    "\1\52\1\65\1\14\1\43\2\14\1\57\1\71\1\54\1\67\1\76"+
    "\1\14\1\61\1\30\1\50\2\14\1\60\1\70\2\14\1\0\1\3"+
    "\1\0\1\102\1\1\1\0\1\32\1\24\1\23\1\37\1\47\1\44"+
    "\1\1\1\51\1\40\1\1\1\64\1\46\1\73\1\27\1\53\1\42"+
    "\1\1\1\33\1\41\1\31\1\62\1\16\1\1\1\55\2\1\1\0"+
    "\1\0\1\0\1\102\63\0\1\102\u0305\0\1\13\u1e61\0\1\102\5\0"+
    "\1\102\376\0\1\102\u0260\0\1\0\3\0\1\0\3\0\1\0\131\0"+
    "\1\36\uba1d\0\1\102\1\102\1\102\1\102\1\102\1\102\2\0\1\102"+
    "\4\0\1\102\1\0\1\102\5\0\1\13\5\0\1\102\13\0\1\26"+
    "\1\26\1\26\1\0\1\102\1\0\1\102\66\0\1\102\u1dfe\0\1\102"+
    "\u019c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\1\1\4\1\5\2\6"+
    "\1\7\1\10\1\1\1\6\1\10\1\11\17\6\1\10"+
    "\1\12\1\13\1\12\1\2\1\14\1\2\1\15\3\5"+
    "\2\1\1\0\1\11\2\1\1\11\1\1\1\0\11\1"+
    "\1\0\1\1\1\16\2\1\1\17\1\2\1\20\1\5"+
    "\2\1\3\0\3\1\1\0\6\1\2\0\1\5\1\1"+
    "\3\0\1\1\1\0\4\1\2\0\1\5\1\1\6\0"+
    "\1\1\6\0\1\21\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\206\0\311\0\206\0\206\0\u025b\0\u029e\0\u02e1"+
    "\0\206\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6"+
    "\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\206\0\u0797\0\u07da\0\206\0\u081d\0\u0860"+
    "\0\u08a3\0\206\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\311\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\311"+
    "\0\u0648\0\u0e22\0\206\0\u0e65\0\206\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u0473\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533"+
    "\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u19a6\0\u19e9\0\u1a2c\0\206\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50"+
    "\0\u1d93\0\u1dd6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\3\1\10\1\12\1\13\1\14\1\4\1\3\3\15"+
    "\2\16\2\3\1\4\1\17\1\4\1\16\1\4\1\20"+
    "\1\15\1\21\4\4\1\22\1\4\1\23\2\4\1\24"+
    "\1\4\1\25\1\4\1\26\1\4\1\27\1\30\1\31"+
    "\1\32\1\4\1\33\1\4\1\34\1\35\1\36\1\37"+
    "\1\40\1\15\1\4\1\3\2\13\1\10\1\3\1\41"+
    "\1\15\15\42\1\43\4\42\1\44\60\42\104\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\33\4\1\0\4\4\4\0\3\5\1\45\1\46"+
    "\10\5\1\47\65\5\15\6\1\0\65\6\77\50\2\0"+
    "\2\50\7\0\1\10\2\0\1\10\64\0\1\10\3\0"+
    "\11\51\1\52\1\0\24\51\1\53\37\51\1\0\3\51"+
    "\1\0\2\4\11\0\1\4\1\0\1\4\1\13\3\0"+
    "\2\4\1\13\1\12\1\54\4\4\3\0\33\4\1\0"+
    "\4\4\5\0\2\4\11\0\1\4\1\0\2\4\3\0"+
    "\3\4\1\0\2\4\1\55\2\4\3\0\33\4\1\56"+
    "\4\4\41\0\1\21\46\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\5\4\3\0\5\4\1\57"+
    "\25\4\1\0\4\4\5\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\5\4\3\0\7\4\1\60"+
    "\23\4\1\0\4\4\5\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\5\4\3\0\12\4\1\61"+
    "\1\4\1\62\16\4\1\0\4\4\5\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\5\4\3\0"+
    "\14\4\1\63\16\4\1\64\4\4\5\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\5\4\3\0"+
    "\10\4\1\65\3\4\1\66\16\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\14\4\1\62\16\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\1\4\1\67"+
    "\1\4\1\0\5\4\3\0\1\4\1\70\1\4\1\71"+
    "\27\4\1\0\4\4\5\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\5\4\3\0\12\4\1\72"+
    "\20\4\1\0\4\4\5\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\5\4\3\0\10\4\1\73"+
    "\22\4\1\0\4\4\5\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\4\4\1\74\3\0\33\4"+
    "\1\0\4\4\5\0\2\4\11\0\1\4\1\0\2\4"+
    "\3\0\3\4\1\0\5\4\3\0\14\4\1\75\16\4"+
    "\1\76\4\4\5\0\2\4\11\0\1\4\1\0\2\4"+
    "\3\0\3\4\1\0\1\77\4\4\3\0\33\4\1\0"+
    "\4\4\5\0\2\4\11\0\1\4\1\0\2\4\3\0"+
    "\3\4\1\0\4\4\1\100\3\0\33\4\1\0\4\4"+
    "\5\0\2\4\11\0\1\4\1\0\2\4\3\0\3\4"+
    "\1\0\5\4\3\0\14\4\1\101\16\4\1\0\4\4"+
    "\5\0\2\4\11\0\1\4\1\0\2\4\3\0\3\4"+
    "\1\0\3\4\1\102\1\4\3\0\33\4\1\0\4\4"+
    "\40\0\1\15\46\0\15\42\1\0\4\42\1\0\60\42"+
    "\21\0\1\103\61\0\3\47\3\5\7\47\1\0\3\5"+
    "\3\47\1\5\2\47\1\5\1\47\3\5\10\47\1\5"+
    "\2\47\1\5\36\47\1\104\1\105\76\47\15\50\1\0"+
    "\65\50\11\51\1\52\1\0\64\51\1\0\14\51\1\52"+
    "\1\0\25\51\1\106\36\51\1\0\3\51\1\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\1\4"+
    "\1\107\3\4\3\0\33\4\1\0\4\4\5\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\4\4"+
    "\1\13\3\0\10\4\1\110\3\4\1\110\16\4\1\0"+
    "\4\4\63\0\1\111\1\112\4\0\1\113\16\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\6\4\1\114\24\4\1\0\4\4\5\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\2\4\1\115\30\4\1\0\4\4\5\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\10\4\1\116\22\4\1\0\4\4\5\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\4\4"+
    "\1\62\3\0\33\4\1\0\4\4\63\0\1\117\24\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\16\4\1\120\14\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\2\4\1\100\2\4\3\0\33\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\7\4\1\62\23\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\2\4\1\102\30\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\21\4\1\121\11\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\1\4\1\122\31\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\2\4\1\123\2\4\3\0\33\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\10\4\1\124\22\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\2\4\1\125\2\4\3\0\33\4\1\0\4\4\101\0"+
    "\1\126\1\127\5\0\2\4\11\0\1\4\1\0\2\4"+
    "\3\0\3\4\1\0\5\4\3\0\1\100\1\4\1\13"+
    "\30\4\1\0\4\4\5\0\2\4\11\0\1\4\1\0"+
    "\2\4\3\0\3\4\1\0\2\4\1\13\2\4\3\0"+
    "\33\4\1\0\4\4\4\0\15\47\1\0\65\47\11\51"+
    "\1\52\1\0\26\51\1\130\35\51\1\0\3\51\1\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\2\4\1\131\2\4\3\0\33\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\3\4\1\62\27\4\1\0\4\4\76\0"+
    "\1\132\50\0\1\133\104\0\1\134\41\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\1\135\4\4"+
    "\3\0\33\4\1\0\4\4\5\0\2\4\11\0\1\4"+
    "\1\0\2\4\3\0\3\4\1\0\5\4\3\0\10\4"+
    "\1\62\22\4\1\0\4\4\5\0\2\4\11\0\1\4"+
    "\1\0\2\4\3\0\3\4\1\0\1\62\4\4\3\0"+
    "\33\4\1\0\4\4\44\0\1\136\43\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\2\4\1\62"+
    "\2\4\3\0\33\4\1\0\4\4\5\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\5\4\3\0"+
    "\12\4\1\137\20\4\1\0\4\4\5\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\5\4\3\0"+
    "\7\4\1\140\23\4\1\0\4\4\5\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\5\4\3\0"+
    "\23\4\1\141\7\4\1\0\4\4\5\0\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\3\4\1\0\3\4\1\142"+
    "\1\4\3\0\33\4\1\0\4\4\57\0\1\143\75\0"+
    "\1\144\34\0\11\51\1\52\1\0\27\51\1\145\34\51"+
    "\1\0\3\51\1\0\2\4\11\0\1\4\1\0\2\4"+
    "\3\0\3\4\1\0\3\4\1\146\1\4\3\0\33\4"+
    "\1\0\4\4\54\0\1\147\3\0\1\150\1\0\1\144"+
    "\4\0\1\151\46\0\1\152\124\0\1\153\32\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\1\62\32\4\1\0\4\4\33\0\1\154\54\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\1\4\1\155\31\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\5\4\3\0\10\4\1\57\22\4\1\0\4\4\5\0"+
    "\2\4\11\0\1\4\1\0\2\4\3\0\3\4\1\0"+
    "\4\4\1\116\3\0\33\4\1\0\4\4\5\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\25\4\1\62\5\4\1\0\4\4\33\0\1\156"+
    "\126\0\1\157\27\0\11\51\1\21\1\0\64\51\1\0"+
    "\3\51\1\0\2\4\11\0\1\4\1\0\2\4\3\0"+
    "\3\4\1\0\4\4\1\102\3\0\33\4\1\0\4\4"+
    "\55\0\1\160\104\0\1\161\62\0\1\162\106\0\1\163"+
    "\70\0\1\164\46\0\1\164\55\0\1\164\34\0\2\4"+
    "\11\0\1\4\1\0\2\4\3\0\3\4\1\0\5\4"+
    "\3\0\7\4\1\115\23\4\1\0\4\4\33\0\1\165"+
    "\104\0\1\164\111\0\1\166\75\0\1\167\122\0\1\170"+
    "\115\0\1\171\2\0\1\172\60\0\1\173\56\0\1\174"+
    "\3\0\1\164\146\0\1\175\73\0\1\176\100\0\1\177"+
    "\52\0\1\200\73\0\1\157\143\0\1\164\50\0\1\201"+
    "\117\0\1\200\64\0\1\202\100\0\1\164\121\0\1\164"+
    "\107\0\1\164\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7705];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\1\1\2\11\3\1\1\11"+
    "\21\1\1\11\2\1\1\11\3\1\1\11\3\1\1\0"+
    "\5\1\1\0\11\1\1\0\4\1\1\11\1\1\1\11"+
    "\3\1\3\0\3\1\1\0\6\1\2\0\2\1\3\0"+
    "\1\1\1\0\4\1\2\0\2\1\6\0\1\1\6\0"+
    "\1\11\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public JavaTokenMaker() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * DELETE THE OTHER ONE   
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * DELETE THE OTHER ONE   
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 282) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 18: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 19: break;
        case 17: 
          { addToken(Token.FUNCTION);
          }
        case 20: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 21: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 22: break;
        case 3: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 23: break;
        case 14: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 24: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 6: 
          { addToken(Token.VARIABLE);
          }
        case 26: break;
        case 13: 
          { addToken(Token.PREPROCESSOR); addNullToken(); return firstToken;
          }
        case 27: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 28: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 29: break;
        case 5: 
          { addToken(Token.MARKUP_ENTITY_REFERENCE);
          }
        case 30: break;
        case 2: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 31: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 16: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 33: break;
        case 10: 
          { 
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 131: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 132: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
