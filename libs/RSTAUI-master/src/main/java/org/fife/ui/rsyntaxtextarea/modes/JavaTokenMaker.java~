/* The following code was generated by JFlex 1.4.1 on 02/05/18 20:53 */

package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 02/05/18 20:53 from the specification file
 * <tt>C:/Users/Catherine/git/BIDE/libs/RSTAUI-master/src/main/java/org/fife/ui/rsyntaxtextarea/modes/JavaTokenMaker.flex</tt>
 */
public class JavaTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\17\1\0\1\10\1\0\22\0\1\107\1\110\1\4"+
    "\1\6\1\0\1\111\1\11\1\5\1\106\1\0\1\24\1\111\1\0"+
    "\1\102\1\0\1\23\1\21\1\27\1\30\1\105\6\2\1\16\1\12"+
    "\1\111\1\37\1\40\1\22\1\0\1\71\1\66\1\77\1\61\1\50"+
    "\1\55\1\70\1\15\1\46\2\15\1\62\1\103\1\57\1\72\1\100"+
    "\1\15\1\64\1\33\1\53\1\15\1\104\1\63\1\73\2\15\1\0"+
    "\1\3\1\0\1\101\1\7\1\0\1\35\1\26\1\25\1\41\1\52"+
    "\1\47\1\75\1\54\1\42\1\1\1\67\1\51\1\74\1\32\1\56"+
    "\1\44\1\76\1\36\1\43\1\34\1\65\1\20\1\1\1\60\2\1"+
    "\1\0\1\0\1\0\1\111\63\0\1\111\2\0\1\111\u0302\0\1\14"+
    "\u1e61\0\1\111\5\0\1\111\376\0\1\111\u02c2\0\1\45\uba1d\0\1\111"+
    "\1\111\1\111\1\111\1\111\1\111\2\0\1\111\4\0\1\111\1\0"+
    "\1\111\5\0\1\14\5\0\1\111\13\0\1\31\1\31\1\31\1\0"+
    "\1\111\1\0\1\111\66\0\1\111\u1dfe\0\1\111\u019c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\1\1\4\1\5\2\6"+
    "\1\7\1\10\1\11\2\1\1\6\1\11\20\6\1\11"+
    "\1\12\1\13\1\12\1\2\1\14\1\2\2\15\1\16"+
    "\22\5\1\1\1\0\1\1\1\0\1\7\3\1\1\7"+
    "\1\1\1\0\14\1\1\0\1\1\1\17\3\1\1\20"+
    "\1\2\1\21\1\0\16\5\1\17\5\5\1\1\1\0"+
    "\2\1\3\0\4\1\1\0\7\1\1\0\1\1\2\0"+
    "\1\6\12\5\1\1\1\0\1\1\3\0\1\1\2\0"+
    "\1\6\4\1\5\0\5\5\1\1\12\0\1\1\4\0"+
    "\1\5\6\0\1\22\4\0\1\5\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\224\0\336\0\224\0\224\0\224\0\u029a\0\u02e4"+
    "\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534"+
    "\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784"+
    "\0\u07ce\0\u0818\0\u0862\0\u08ac\0\224\0\u08f6\0\u0940\0\224"+
    "\0\u098a\0\224\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\224\0\u0afc"+
    "\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c"+
    "\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c"+
    "\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\336\0\u11a2"+
    "\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\336"+
    "\0\u073a\0\u1642\0\u168c\0\224\0\u16d6\0\224\0\u09d4\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970"+
    "\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\224\0\u1b2c\0\u1b76"+
    "\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016"+
    "\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u0534"+
    "\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c"+
    "\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628\0\u2672\0\u26bc"+
    "\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u290c"+
    "\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c"+
    "\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac"+
    "\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202\0\u324c"+
    "\0\u3296\0\u32e0\0\u332a\0\u3374\0\224\0\u33be\0\u3408\0\u3452"+
    "\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2"+
    "\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2"+
    "\0\u393c\0\u3986\0\u39d0\0\u3a1a\0\u3a64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\3\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\1\3\1\10\1\12\1\13\1\14\1\15\1\4"+
    "\1\3\3\16\2\17\2\20\1\3\1\4\1\21\1\4"+
    "\1\17\1\4\1\22\1\16\4\4\1\14\1\23\1\4"+
    "\1\24\2\4\1\25\1\4\1\26\1\4\1\27\1\4"+
    "\1\30\1\31\1\32\1\33\1\4\1\34\1\4\1\35"+
    "\1\36\1\37\1\40\3\4\2\13\2\16\1\41\1\42"+
    "\2\3\1\10\1\43\1\16\17\44\1\45\4\44\1\46"+
    "\65\44\113\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\5\4\2\0\4\4\1\0"+
    "\33\4\2\0\3\4\4\0\3\5\1\47\1\50\12\5"+
    "\1\51\72\5\16\6\1\52\1\53\72\6\106\54\2\0"+
    "\2\54\10\0\1\10\2\0\1\10\73\0\1\10\2\0"+
    "\7\55\1\56\2\55\1\57\1\0\11\55\1\60\4\55"+
    "\1\61\1\55\1\62\1\63\1\64\2\55\1\65\1\55"+
    "\1\66\1\67\2\55\1\70\1\71\1\55\1\72\14\55"+
    "\1\73\4\55\1\74\1\75\3\55\1\76\5\55\1\0"+
    "\2\55\1\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\1\4\1\13\3\0\2\4\2\13\1\12\1\77\4\4"+
    "\2\0\4\4\1\0\33\4\2\0\3\4\106\0\1\100"+
    "\10\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\2\4\1\101\2\4\2\0\4\4"+
    "\1\0\33\4\1\0\1\102\3\4\44\0\1\14\52\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\1\4\1\103"+
    "\31\4\2\0\3\4\5\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\5\4\2\0"+
    "\4\4\1\0\3\4\1\104\6\4\1\105\20\4\2\0"+
    "\3\4\5\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\5\4\2\0\4\4\1\0"+
    "\6\4\1\106\1\4\1\107\22\4\2\0\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\10\4\1\110"+
    "\22\4\1\0\1\111\3\4\5\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\5\4"+
    "\2\0\4\4\1\0\4\4\1\112\3\4\1\113\22\4"+
    "\2\0\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\5\4\2\0\4\4"+
    "\1\0\10\4\1\107\22\4\2\0\3\4\5\0\2\4"+
    "\4\0\1\4\5\0\1\4\2\0\2\4\3\0\1\4"+
    "\1\114\2\4\1\0\5\4\2\0\1\4\1\115\1\4"+
    "\1\116\1\0\33\4\2\0\3\4\5\0\2\4\4\0"+
    "\1\4\5\0\1\4\2\0\2\4\3\0\4\4\1\0"+
    "\5\4\2\0\4\4\1\0\6\4\1\117\24\4\2\0"+
    "\3\4\5\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\1\120\3\4\1\0\5\4\2\0\4\4"+
    "\1\0\4\4\1\121\21\4\1\122\4\4\2\0\3\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\4\4\1\123\2\0\4\4\1\0"+
    "\22\4\1\124\10\4\2\0\3\4\5\0\2\4\4\0"+
    "\1\4\5\0\1\4\2\0\2\4\3\0\4\4\1\0"+
    "\5\4\2\0\4\4\1\0\10\4\1\125\22\4\1\0"+
    "\1\126\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\1\127\4\4\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\5\0\2\4\4\0"+
    "\1\4\5\0\1\4\2\0\2\4\3\0\4\4\1\0"+
    "\4\4\1\130\2\0\4\4\1\0\33\4\2\0\3\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\4\4\1\0\10\4"+
    "\1\131\22\4\2\0\3\4\5\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\3\4"+
    "\1\132\1\4\2\0\4\4\1\0\33\4\2\0\3\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\1\133\3\4\1\0\5\4\2\0\4\4\1\0"+
    "\33\4\2\0\3\4\43\0\1\16\52\0\17\44\1\0"+
    "\4\44\1\0\65\44\23\0\1\134\66\0\3\51\3\5"+
    "\11\51\1\0\3\5\3\51\1\5\3\51\1\5\1\51"+
    "\3\5\10\51\1\5\2\51\1\5\42\51\1\135\1\136"+
    "\105\51\16\137\1\52\1\53\72\137\17\54\1\0\72\54"+
    "\12\55\1\57\1\0\73\55\1\0\14\55\1\57\1\0"+
    "\13\55\1\140\57\55\1\0\14\55\1\57\1\0\12\55"+
    "\1\141\60\55\1\0\14\55\1\57\1\0\20\55\1\142"+
    "\1\143\14\55\1\144\24\55\2\145\6\55\1\0\14\55"+
    "\1\57\1\0\36\55\1\146\1\55\1\147\32\55\1\0"+
    "\14\55\1\57\1\0\16\55\1\150\54\55\1\0\14\55"+
    "\1\12\1\0\73\55\1\0\14\55\1\57\1\0\26\55"+
    "\1\151\44\55\1\0\14\55\1\57\1\0\62\55\1\141"+
    "\10\55\1\0\14\55\1\57\1\0\26\55\1\152\7\55"+
    "\1\153\34\55\1\0\14\55\1\57\1\0\22\55\1\154"+
    "\13\55\1\155\34\55\1\0\14\55\1\156\1\0\73\55"+
    "\1\0\14\55\1\57\1\0\44\55\1\157\26\55\1\0"+
    "\14\55\1\57\1\0\26\55\1\160\44\55\1\0\14\55"+
    "\1\57\1\0\26\55\1\161\7\55\1\162\34\55\1\0"+
    "\14\55\1\57\1\0\26\55\1\162\44\55\1\0\14\55"+
    "\1\57\1\0\14\55\1\71\51\55\1\163\4\55\1\0"+
    "\2\55\1\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\1\4\1\164\3\4\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\110\0\1\165\6\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\4\4\1\13\2\0\4\4\1\0\4\4"+
    "\1\166\3\4\1\167\22\4\2\0\3\4\66\0\1\170"+
    "\1\171\4\0\1\172\22\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\5\4\2\0"+
    "\4\4\1\0\2\4\1\173\30\4\2\0\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\2\4\1\174\1\4\1\0"+
    "\33\4\2\0\3\4\5\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\5\4\2\0"+
    "\3\4\1\175\1\0\33\4\2\0\3\4\5\0\2\4"+
    "\4\0\1\4\5\0\1\4\2\0\2\4\3\0\4\4"+
    "\1\0\5\4\2\0\4\4\1\0\4\4\1\176\26\4"+
    "\2\0\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\4\4\1\107\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\66\0\1\177\30\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\12\4\1\200"+
    "\20\4\2\0\3\4\5\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\2\4\1\130"+
    "\2\4\2\0\4\4\1\0\33\4\2\0\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\3\4\1\107"+
    "\27\4\2\0\3\4\5\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\5\4\2\0"+
    "\2\4\1\201\1\4\1\0\33\4\2\0\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\15\4\1\202"+
    "\15\4\2\0\3\4\5\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\5\4\2\0"+
    "\1\4\1\203\2\4\1\0\33\4\2\0\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\3\4\1\204"+
    "\27\4\2\0\3\4\5\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\2\4\1\205"+
    "\2\4\2\0\4\4\1\0\33\4\2\0\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\1\131\3\4\1\0\33\4"+
    "\2\0\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\5\4\2\0\4\4"+
    "\1\0\4\4\1\206\26\4\2\0\3\4\5\0\2\4"+
    "\4\0\1\4\5\0\1\4\2\0\2\4\3\0\4\4"+
    "\1\0\5\4\2\0\4\4\1\0\33\4\1\0\1\207"+
    "\3\4\5\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\2\4\1\210\2\4\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\103\0\1\211\1\212"+
    "\12\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\1\130\1\4\1\13"+
    "\1\4\1\0\33\4\2\0\3\4\5\0\2\4\4\0"+
    "\1\4\5\0\1\4\2\0\2\4\3\0\4\4\1\0"+
    "\2\4\1\213\2\4\2\0\4\4\1\0\33\4\2\0"+
    "\3\4\5\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\2\4\1\13\2\4\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\4\0\17\51\1\0"+
    "\72\51\12\55\1\57\1\0\5\55\1\71\65\55\1\0"+
    "\14\55\1\57\1\0\22\55\1\214\50\55\1\0\14\55"+
    "\1\57\1\0\40\55\1\215\32\55\1\0\14\55\1\57"+
    "\1\0\16\55\1\216\54\55\1\0\14\55\1\57\1\0"+
    "\61\55\1\71\11\55\1\0\14\55\1\57\1\0\22\55"+
    "\1\71\50\55\1\0\14\55\1\57\1\0\22\55\1\157"+
    "\50\55\1\0\14\55\1\57\1\0\36\55\1\217\34\55"+
    "\1\0\14\55\1\57\1\0\61\55\1\220\11\55\1\0"+
    "\14\55\1\57\1\0\27\55\1\221\43\55\1\0\14\55"+
    "\1\57\1\0\11\55\1\216\61\55\1\0\14\55\1\57"+
    "\1\0\20\55\1\157\52\55\1\0\14\55\1\57\1\0"+
    "\21\55\1\222\51\55\1\0\14\55\1\57\1\0\60\55"+
    "\1\223\12\55\1\0\14\55\1\57\1\0\21\55\1\71"+
    "\51\55\1\0\14\55\1\57\1\0\35\55\1\216\35\55"+
    "\1\0\14\55\1\57\1\0\11\55\1\224\23\55\1\225"+
    "\35\55\1\0\14\55\1\57\1\0\61\55\1\157\11\55"+
    "\1\0\14\55\1\57\1\0\13\55\1\71\57\55\1\0"+
    "\2\55\1\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\2\4\1\226\2\4\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\41\0\1\227\55\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\3\4\1\107\1\0\33\4"+
    "\2\0\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\5\4\2\0\3\4"+
    "\1\107\1\0\33\4\2\0\1\4\1\230\1\4\106\0"+
    "\1\231\51\0\1\232\113\0\1\233\46\0\2\4\4\0"+
    "\1\4\5\0\1\4\2\0\2\4\3\0\4\4\1\0"+
    "\1\234\4\4\2\0\4\4\1\0\33\4\2\0\3\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\4\4\1\0\4\4"+
    "\1\107\26\4\2\0\3\4\5\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\5\4"+
    "\2\0\4\4\1\0\33\4\1\0\1\235\3\4\5\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\1\107\4\4\2\0\4\4\1\0\33\4"+
    "\2\0\3\4\46\0\1\236\50\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\2\4"+
    "\1\107\2\4\2\0\4\4\1\0\33\4\2\0\3\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\2\4\1\237\2\4\2\0\4\4"+
    "\1\0\33\4\2\0\3\4\5\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\5\4"+
    "\2\0\4\4\1\0\6\4\1\240\24\4\2\0\3\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\4\4\1\0\3\4"+
    "\1\241\27\4\2\0\3\4\5\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\5\4"+
    "\2\0\4\4\1\0\33\4\2\0\1\4\1\230\1\4"+
    "\5\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\4\4\1\0\17\4"+
    "\1\242\13\4\2\0\3\4\5\0\2\4\4\0\1\4"+
    "\5\0\1\4\2\0\2\4\3\0\4\4\1\0\3\4"+
    "\1\243\1\4\2\0\4\4\1\0\33\4\2\0\3\4"+
    "\63\0\1\244\20\0\1\245\67\0\1\246\104\0\1\247"+
    "\41\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\4\4\1\0\33\4"+
    "\1\0\1\250\3\4\4\0\12\55\1\57\1\0\20\55"+
    "\1\71\52\55\1\0\11\55\1\251\2\55\1\57\1\0"+
    "\73\55\1\0\14\55\1\57\1\0\42\55\1\71\30\55"+
    "\1\0\14\55\1\57\1\0\20\55\1\252\52\55\1\0"+
    "\14\55\1\57\1\0\35\55\1\253\35\55\1\0\14\55"+
    "\1\57\1\0\30\55\1\254\42\55\1\0\14\55\1\57"+
    "\1\0\11\55\1\71\61\55\1\0\14\55\1\57\1\0"+
    "\20\55\1\216\52\55\1\0\14\55\1\57\1\0\22\55"+
    "\1\216\50\55\1\0\14\55\1\57\1\0\35\55\1\255"+
    "\35\55\1\0\2\55\1\0\2\4\4\0\1\4\5\0"+
    "\1\4\2\0\2\4\3\0\4\4\1\0\3\4\1\256"+
    "\1\4\2\0\4\4\1\0\33\4\2\0\3\4\42\0"+
    "\1\257\54\0\2\4\4\0\1\4\5\0\1\4\2\0"+
    "\2\4\3\0\4\4\1\0\5\4\2\0\4\4\1\0"+
    "\33\4\1\0\1\260\3\4\57\0\1\261\3\0\1\262"+
    "\1\0\1\247\4\0\1\263\55\0\1\264\133\0\1\265"+
    "\36\0\2\4\4\0\1\4\5\0\1\4\2\0\2\4"+
    "\3\0\4\4\1\0\5\4\2\0\1\107\3\4\1\0"+
    "\33\4\2\0\3\4\44\0\1\266\103\0\1\267\60\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\33\4\1\0"+
    "\1\270\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\5\4\2\0\1\4"+
    "\1\271\2\4\1\0\33\4\2\0\3\4\5\0\2\4"+
    "\4\0\1\4\5\0\1\4\2\0\2\4\3\0\4\4"+
    "\1\0\5\4\2\0\4\4\1\0\4\4\1\103\26\4"+
    "\2\0\3\4\5\0\2\4\4\0\1\4\5\0\1\4"+
    "\2\0\2\4\3\0\4\4\1\0\4\4\1\176\2\0"+
    "\4\4\1\0\33\4\2\0\3\4\5\0\2\4\4\0"+
    "\1\4\5\0\1\4\2\0\2\4\3\0\4\4\1\0"+
    "\5\4\2\0\4\4\1\0\21\4\1\107\11\4\2\0"+
    "\3\4\62\0\1\236\75\0\1\272\101\0\1\273\135\0"+
    "\1\274\73\0\1\275\51\0\12\55\1\57\1\0\22\55"+
    "\1\276\50\55\1\0\14\55\1\57\1\0\21\55\1\64"+
    "\51\55\1\0\14\55\1\57\1\0\36\55\1\71\34\55"+
    "\1\0\14\55\1\14\1\0\73\55\1\0\14\55\1\57"+
    "\1\0\26\55\1\71\44\55\1\0\2\55\1\0\2\4"+
    "\4\0\1\4\5\0\1\4\2\0\2\4\3\0\4\4"+
    "\1\0\4\4\1\133\2\0\4\4\1\0\33\4\2\0"+
    "\3\4\46\0\1\277\132\0\1\300\102\0\1\301\113\0"+
    "\1\302\71\0\1\303\114\0\1\304\77\0\2\305\54\0"+
    "\1\305\37\0\1\306\130\0\1\305\77\0\1\307\52\0"+
    "\2\4\4\0\1\4\5\0\1\4\2\0\2\4\3\0"+
    "\4\4\1\0\5\4\2\0\4\4\1\0\3\4\1\174"+
    "\27\4\2\0\3\4\31\0\1\274\116\0\1\310\113\0"+
    "\1\305\137\0\1\311\27\0\12\55\1\57\1\0\42\55"+
    "\1\312\30\55\1\0\2\55\35\0\1\313\116\0\1\314"+
    "\111\0\1\315\105\0\1\316\131\0\1\317\124\0\1\320"+
    "\11\0\1\321\42\0\1\322\160\0\1\323\60\0\1\272"+
    "\101\0\1\324\47\0\12\55\1\57\1\0\42\55\1\214"+
    "\30\55\1\0\2\55\26\0\1\325\115\0\1\305\104\0"+
    "\1\326\4\0\1\305\153\0\1\327\104\0\1\330\107\0"+
    "\1\331\61\0\1\314\112\0\1\305\110\0\1\332\117\0"+
    "\1\332\117\0\1\267\127\0\1\305\57\0\1\333\126\0"+
    "\1\314\73\0\1\334\111\0\1\335\126\0\1\305\116\0"+
    "\1\305\141\0\1\305\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15022];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\1\1\3\11\26\1\1\11"+
    "\2\1\1\11\1\1\1\11\4\1\1\11\20\1\1\0"+
    "\1\1\1\0\6\1\1\0\14\1\1\0\5\1\1\11"+
    "\1\1\1\11\1\0\16\1\1\11\6\1\1\0\2\1"+
    "\3\0\4\1\1\0\7\1\1\0\1\1\2\0\14\1"+
    "\1\0\1\1\3\0\1\1\2\0\5\1\5\0\6\1"+
    "\12\0\1\1\4\0\1\1\6\0\1\11\4\0\1\1"+
    "\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public JavaTokenMaker() {   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * DELETE THE OTHER ONE (down)
    */   
   private boolean zzRefill() {   
      return zzCurrentPos>=s.offset+s.count;   
   }   
   
   /**   
    * DELETE THE OTHER ONE (down)
    */   
   public final void yyreset(Reader reader) {   
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 276) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { addNullToken(); return firstToken;
          }
        case 19: break;
        case 13: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 20: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 21: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 22: break;
        case 5: 
          { addToken(Token.MARKUP_ENTITY_REFERENCE);
          }
        case 23: break;
        case 7: 
          { addToken(Token.RESERVED_WORD);
          }
        case 24: break;
        case 6: 
          { addToken(Token.VARIABLE);
          }
        case 25: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 26: break;
        case 18: 
          { addToken(Token.FUNCTION);
          }
        case 27: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 28: break;
        case 2: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 29: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 30: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 31: break;
        case 14: 
          { addToken(Token.PREPROCESSOR); addNullToken(); return firstToken;
          }
        case 32: break;
        case 15: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 33: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 34: break;
        case 10: 
          { 
          }
        case 35: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 222: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 223: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
